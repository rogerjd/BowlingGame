unit TestBowlingGame;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Generics.Collections, BowlingGame;

type
  // Test methods for class TFrameRollsCtrl

  TestTFrameRollsCtrl = class(TTestCase)
  strict private
    FFrameRollsCtrl: TFrameRollsCtrl;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestRecordRoll;
  end;
  // Test methods for class TFrame

  TestTFrame = class(TTestCase)
  strict private
    FFrame: TFrame;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestNeedRollsRecordedInFutureFrame;
  end;
  // Test methods for class TFramesCtrl

  TestTFramesCtrl = class(TTestCase)
  strict private
    FFramesCtrl: TFramesCtrl;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetCurrent;
    procedure TestNext;
    procedure TestInit;
  end;
  // Test methods for class TPendingScoreFrame

  TestTPendingScoreFrame = class(TTestCase)
  strict private
    FPendingScoreFrame: TPendingScoreFrame;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  // Test methods for class TPendingFrames

  TestTPendingFrames = class(TTestCase)
  strict private
    FPendingFrames: TPendingFrames;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  // Test methods for class TScoreCtrl

  TestTScoreCtrl = class(TTestCase)
  strict private
    FScoreCtrl: TScoreCtrl;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestScore;
  end;
  // Test methods for class TBowlingGame

  TestTBowlingGame = class(TTestCase)
  strict private
    FBowlingGame: TBowlingGame;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestStart;
    procedure TestRoll;
    procedure TestScoreByFrame;
  end;

implementation

procedure TestTFrameRollsCtrl.SetUp;
begin
  FFrameRollsCtrl := TFrameRollsCtrl.Create;
end;

procedure TestTFrameRollsCtrl.TearDown;
begin
  FFrameRollsCtrl.Free;
  FFrameRollsCtrl := nil;
end;

procedure TestTFrameRollsCtrl.TestRecordRoll;
var
  NumPins: Integer;
begin
  // TODO: Setup method call parameters
  FFrameRollsCtrl.RecordRoll(NumPins);
  // TODO: Validate method results
end;

procedure TestTFrame.SetUp;
begin
  FFrame := TFrame.Create;
end;

procedure TestTFrame.TearDown;
begin
  FFrame.Free;
  FFrame := nil;
end;

procedure TestTFrame.TestNeedRollsRecordedInFutureFrame;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFrame.NeedRollsRecordedInFutureFrame;
  // TODO: Validate method results
end;

procedure TestTFramesCtrl.SetUp;
begin
  FFramesCtrl := TFramesCtrl.Create;
end;

procedure TestTFramesCtrl.TearDown;
begin
  FFramesCtrl.Free;
  FFramesCtrl := nil;
end;

procedure TestTFramesCtrl.TestGetCurrent;
var
  ReturnValue: TFrame;
begin
  ReturnValue := FFramesCtrl.GetCurrent;
  // TODO: Validate method results
end;

procedure TestTFramesCtrl.TestNext;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFramesCtrl.Next;
  // TODO: Validate method results
end;

procedure TestTFramesCtrl.TestInit;
begin
  FFramesCtrl.Init;
  // TODO: Validate method results
end;

procedure TestTPendingScoreFrame.SetUp;
begin
  FPendingScoreFrame := TPendingScoreFrame.Create;
end;

procedure TestTPendingScoreFrame.TearDown;
begin
  FPendingScoreFrame.Free;
  FPendingScoreFrame := nil;
end;

procedure TestTPendingFrames.SetUp;
begin
  FPendingFrames := TPendingFrames.Create;
end;

procedure TestTPendingFrames.TearDown;
begin
  FPendingFrames.Free;
  FPendingFrames := nil;
end;

procedure TestTScoreCtrl.SetUp;
begin
  FScoreCtrl := TScoreCtrl.Create;
end;

procedure TestTScoreCtrl.TearDown;
begin
  FScoreCtrl.Free;
  FScoreCtrl := nil;
end;

procedure TestTScoreCtrl.TestScore;
begin
  FScoreCtrl.Score;
  // TODO: Validate method results
end;

procedure TestTBowlingGame.SetUp;
begin
  FBowlingGame := TBowlingGame.Create;
end;

procedure TestTBowlingGame.TearDown;
begin
  FBowlingGame.Free;
  FBowlingGame := nil;
end;

procedure TestTBowlingGame.TestStart;
begin
  FBowlingGame.Start;
  // TODO: Validate method results
end;

procedure TestTBowlingGame.TestRoll;
var
  NumOfPins: Integer;
begin
  // TODO: Setup method call parameters
  FBowlingGame.Roll(NumOfPins);
  // TODO: Validate method results
end;

procedure TestTBowlingGame.TestScoreByFrame;
var
  ReturnValue: Integer;
begin
  ReturnValue := FBowlingGame.ScoreByFrame;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFrameRollsCtrl.Suite);
  RegisterTest(TestTFrame.Suite);
  RegisterTest(TestTFramesCtrl.Suite);
  RegisterTest(TestTPendingScoreFrame.Suite);
  RegisterTest(TestTPendingFrames.Suite);
  RegisterTest(TestTScoreCtrl.Suite);
  RegisterTest(TestTBowlingGame.Suite);
end.

